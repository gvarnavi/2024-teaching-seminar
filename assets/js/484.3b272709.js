"use strict";(self.webpackChunk_2024teaching_seminar=self.webpackChunk_2024teaching_seminar||[]).push([[484],{50400:(e,t,n)=>{e.exports=n.p+"00fc4ba5dede9352.svg"},16257:(e,t,n)=>{e.exports=n.p+"8b1d1e57b670b738.svg"},55031:(e,t,n)=>{e.exports=n.p+"809eb12af7086391.svg"},79395:(e,t,n)=>{function a(e){return e`<div style="color: grey; font: 13px/25.5px var(--sans-serif); text-transform: uppercase;"><h1 style="display: none;">Color legend</h1><a href="https://d3js.org/">D3</a> › <a href="/@d3/gallery">Gallery</a></div>

# Color legend

A simple legend for a [color scale](/@d3/color-schemes). Supports [continuous](/@d3/continuous-scales), [sequential](/@d3/sequential-scales), [diverging](/@d3/diverging-scales), [quantize, quantile, threshold](/@d3/quantile-quantize-and-threshold-scales) and [ordinal](/@d3/d3-scaleordinal) scales. To use:

~~~js
import {Legend, Swatches} from "@d3/color-legend"
~~~

Then call the legend function as shown below. (For ordinal scales, also consider the swatches function.)`}function i(e,t){return e(t.scaleSequential([0,100],t.interpolateViridis),{title:"Temperature (\xb0F)"})}function r(e,t){return e(t.scaleSequentialSqrt([0,1],t.interpolateTurbo),{title:"Speed (kts)"})}function o(e,t){return e(t.scaleDiverging([-.1,0,.1],t.interpolatePiYG),{title:"Daily change",tickFormat:"+%"})}function l(e,t){return e(t.scaleDivergingSqrt([-.1,0,.1],t.interpolateRdBu),{title:"Daily change",tickFormat:"+%"})}function s(e,t){return e(t.scaleSequentialLog([1,100],t.interpolateBlues),{title:"Energy (joules)",ticks:10})}function c(e,t){return e(t.scaleSequentialQuantile(t.range(100).map((()=>Math.random()**2)),t.interpolateBlues),{title:"Quantile",tickFormat:".2f"})}function u(e,t){return e(t.scaleSqrt([-100,0,100],["blue","white","red"]),{title:"Temperature (\xb0C)"})}function d(e,t){return e(t.scaleQuantize([1,10],t.schemePurples[9]),{title:"Unemployment rate (%)"})}function h(e,t){return e(t.scaleQuantile(t.range(1e3).map(t.randomNormal(100,20)),t.schemeSpectral[9]),{title:"Height (cm)",tickFormat:".0f"})}function f(e,t){return e(t.scaleThreshold([2.5,3.1,3.5,3.9,6,7,8,9.5],t.schemeRdBu[9]),{title:"Unemployment rate (%)",tickSize:0})}function m(e,t){return e(t.scaleOrdinal(["<10","10-19","20-29","30-39","40-49","50-59","60-69","70-79","\u226580"],t.schemeSpectral[10]),{title:"Age (years)",tickSize:0})}function p(e){return e`But wait, there’s more!

How about swatches for ordinal color scales? Both variable-width swatches and [column layout](https://developer.mozilla.org/en-US/docs/Web/CSS/columns) are supported.`}function b(e,t){return e(t.scaleOrdinal(["blueberries","oranges","apples"],t.schemeCategory10))}function g(e,t){return e(t.scaleOrdinal(["Wholesale and Retail Trade","Manufacturing","Leisure and hospitality","Business services","Construction","Education and Health","Government","Finance","Self-employed","Other"],t.schemeTableau10),{columns:"180px"})}function v(e){return e`---

## Implementation`}function y(e){return function(t,{title:n,tickSize:a=6,width:i=320,height:r=44+a,marginTop:o=18,marginRight:l=0,marginBottom:s=16+a,marginLeft:c=0,ticks:u=i/64,tickFormat:d,tickValues:h}={}){function f(e,t=256){const n=document.createElement("canvas");n.width=t,n.height=1;const a=n.getContext("2d");for(let i=0;i<t;++i)a.fillStyle=e(i/(t-1)),a.fillRect(i,0,1,1);return n}const m=e.create("svg").attr("width",i).attr("height",r).attr("viewBox",[0,0,i,r]).style("overflow","visible").style("display","block");let p,b=e=>e.selectAll(".tick line").attr("y1",o+s-r);if(t.interpolate){const n=Math.min(t.domain().length,t.range().length);p=t.copy().rangeRound(e.quantize(e.interpolate(c,i-l),n)),m.append("image").attr("x",c).attr("y",o).attr("width",i-c-l).attr("height",r-o-s).attr("preserveAspectRatio","none").attr("xlink:href",f(t.copy().domain(e.quantize(e.interpolate(0,1),n))).toDataURL())}else if(t.interpolator){if(p=Object.assign(t.copy().interpolator(e.interpolateRound(c,i-l)),{range:()=>[c,i-l]}),m.append("image").attr("x",c).attr("y",o).attr("width",i-c-l).attr("height",r-o-s).attr("preserveAspectRatio","none").attr("xlink:href",f(t.interpolator()).toDataURL()),!p.ticks){if(void 0===h){const n=Math.round(u+1);h=e.range(n).map((a=>e.quantile(t.domain(),a/(n-1))))}"function"!=typeof d&&(d=e.format(void 0===d?",f":d))}}else if(t.invertExtent){const n=t.thresholds?t.thresholds():t.quantiles?t.quantiles():t.domain(),a=void 0===d?e=>e:"string"==typeof d?e.format(d):d;p=e.scaleLinear().domain([-1,t.range().length-1]).rangeRound([c,i-l]),m.append("g").selectAll("rect").data(t.range()).join("rect").attr("x",((e,t)=>p(t-1))).attr("y",o).attr("width",((e,t)=>p(t)-p(t-1))).attr("height",r-o-s).attr("fill",(e=>e)),h=e.range(n.length),d=e=>a(n[e],e)}else p=e.scaleBand().domain(t.domain()).rangeRound([c,i-l]),m.append("g").selectAll("rect").data(t.domain()).join("rect").attr("x",p).attr("y",o).attr("width",Math.max(0,p.bandwidth()-1)).attr("height",r-o-s).attr("fill",t),b=()=>{};return m.append("g").attr("transform",`translate(0,${r-s})`).call(e.axisBottom(p).ticks(u,"string"==typeof d?d:void 0).tickFormat("function"==typeof d?d:void 0).tickSize(a).tickValues(h)).call(b).call((e=>e.select(".domain").remove())).call((e=>e.append("text").attr("x",c).attr("y",o+s-r-6).attr("fill","currentColor").attr("text-anchor","start").attr("font-weight","bold").attr("class","title").text(n))),m.node()}}function _(e){return function({color:t,...n}){return e(t,n)}}function w(e,t){return function(n,{columns:a=null,format:i,unknown:r,swatchSize:o=15,swatchWidth:l=o,swatchHeight:s=o,marginLeft:c=0}={}){const u=`-swatches-${Math.random().toString(16).slice(2)}`,d=null==r?void 0:n.unknown(),h=null==d||d===e.scaleImplicit?[]:[d],f=n.domain().concat(h);return void 0===i&&(i=e=>e===d?r:e),null!==a?t.html`<div style="display: flex; align-items: center; margin-left: ${+c}px; min-height: 33px; font: 10px sans-serif;">
  <style>

.${u}-item {
  break-inside: avoid;
  display: flex;
  align-items: center;
  padding-bottom: 1px;
}

.${u}-label {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: calc(100% - ${+l}px - 0.5em);
}

.${u}-swatch {
  width: ${+l}px;
  height: ${+s}px;
  margin: 0 0.5em 0 0;
}

  </style>
  <div style=${{width:"100%",columns:a}}>${f.map((e=>{const a=`${i(e)}`;return t.html`<div class=${u}-item>
      <div class=${u}-swatch style=${{background:n(e)}}></div>
      <div class=${u}-label title=${a}>${a}</div>
    </div>`}))}
  </div>
</div>`:t.html`<div style="display: flex; align-items: center; min-height: 33px; margin-left: ${+c}px; font: 10px sans-serif;">
  <style>

.${u} {
  display: inline-flex;
  align-items: center;
  margin-right: 1em;
}

.${u}::before {
  content: "";
  width: ${+l}px;
  height: ${+s}px;
  margin-right: 0.5em;
  background: var(--color);
}

  </style>
  <div>${f.map((e=>t.html`<span class="${u}" style="--color: ${n(e)}">${i(e)}</span>`))}</div>`}}function x(e){return function({color:t,...n}){return e(t,n)}}function k(e,t){const n=e.module();return n.variable(t()).define(["md"],a),n.variable(t()).define(["Legend","d3"],i),n.variable(t()).define(["Legend","d3"],r),n.variable(t()).define(["Legend","d3"],o),n.variable(t()).define(["Legend","d3"],l),n.variable(t()).define(["Legend","d3"],s),n.variable(t()).define(["Legend","d3"],c),n.variable(t()).define(["Legend","d3"],u),n.variable(t()).define(["Legend","d3"],d),n.variable(t()).define(["Legend","d3"],h),n.variable(t()).define(["Legend","d3"],f),n.variable(t()).define(["Legend","d3"],m),n.variable(t()).define(["md"],p),n.variable(t()).define(["Swatches","d3"],b),n.variable(t()).define(["Swatches","d3"],g),n.variable(t()).define(["md"],v),n.variable(t("Legend")).define("Legend",["d3"],y),n.variable(t("legend")).define("legend",["Legend"],_),n.variable(t("Swatches")).define("Swatches",["d3","htl"],w),n.variable(t("swatches")).define("swatches",["Swatches"],x),n}function S(e){return e`# Scrubber

This reusable input is intended to drive animations while providing the reader interactive control on demand: the animation pauses when the user interacts with the slider, but can be resumed by clicking the play button. For examples, see [Bar Chart Race](/@mbostock/bar-chart-race-with-scrubber), [The Wealth & Health of Nations](/@mbostock/the-wealth-health-of-nations), [Solar Path](/@mbostock/solar-path), or [Animated Treemap](/@d3/animated-treemap).`}function D(e){return e`To use in your notebook:

~~~js
import {Scrubber} from "@mbostock/scrubber"
~~~
`}function M(e,t){return e(t)}function j(){return Array.from({length:256},((e,t)=>t))}function L(e,t){return e`The current value of *i* is ${t}.`}function q(e){return e`Given an array of *values* representing the discrete frames of the animation, such as an array of numbers or dates, Scrubber returns a [view-compatible input](/@observablehq/introduction-to-views). (It uses the [disposal promise](/@mbostock/disposal) to stop the animation automatically on invalidation.)`}function P(e){return e`## Options

Scrubber has several options which you can pass as the second argument.`}function A(e){return e`The *autoplay* option, which defaults to true, specifies whether the animation plays automatically. Set it to false to require the reader to click on the play button.`}function T(e,t){return e(t,{autoplay:!1})}function I(e){return e`The *loop* option, which defaults to true, specifies whether the animation should automatically restart from the beginning after the end is reached. Set it to false to require the reader to click the play button to restart the animation after it ends.`}function $(e,t){return e(t,{loop:!1})}function z(e){return e`The *alternate* option, which defaults to false, specifies whether the animation should reverse direction when it reaches the end, rather than repeat from the start.`}function J(e,t){return e(t,{loop:!1,alternate:!0})}function W(e){return e`The *delay* option, which defaults to null, specifies how long to wait between frames in milliseconds. A null value means to use [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame), which typically means sixty times per second (about 17ms). Non-null delays use [setInterval](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval).`}function O(e){return e(["red","green","blue"],{delay:1e3})}function B(e){return e`The *loopDelay* option, which defaults to 0, specifies how long to wait before looping in milliseconds. This can be paired with the *initial* option to show the ending value before the animation starts anew from the beginning.`}function N(e,t){return e(t,{initial:t.length-1,loopDelay:1e3})}function G(e){return e`The *format* option, which defaults to the identity function, specifies how to display the currently-selected value. The *format* function is passed the current value, the current (zero-based) index, and the values array.`}function F(){return Array.from({length:365},((e,t)=>{const n=new Date(2019,0,1);return n.setDate(t+1),n}))}function C(e,t){return e(t,{autoplay:!1,format:e=>e.toLocaleString("en",{month:"long",day:"numeric"})})}function E(e){return e`If you have suggestions for other options you’d like to see, please let me know!`}function R(e){return e`---

## Implementation`}function H(e,t){return function(n,{format:a=(e=>e),initial:i=0,direction:r=1,delay:o=null,autoplay:l=!0,loop:s=!0,loopDelay:c=null,alternate:u=!1}={}){n=Array.from(n);const d=e`<form style="font: 12px var(--sans-serif); font-variant-numeric: tabular-nums; display: flex; height: 33px; align-items: center;">
  <button name=b type=button style="margin-right: 0.4em; width: 5em;"></button>
  <label style="display: flex; align-items: center;">
    <input name=i type=range min=0 max=${n.length-1} value=${i} step=1 style="width: 180px;">
    <output name=o style="margin-left: 0.4em;"></output>
  </label>
</form>`;let h=null,f=null,m=null;function p(){d.b.textContent="Pause",null===o?h=requestAnimationFrame(v):m=setInterval(v,o)}function b(){d.b.textContent="Play",null!==h&&(cancelAnimationFrame(h),h=null),null!==f&&(clearTimeout(f),f=null),null!==m&&(clearInterval(m),m=null)}function g(){return null!==h||null!==f||null!==m}function v(){if(d.i.valueAsNumber===(r>0?n.length-1:r<0?0:NaN)){if(!s)return b();if(u&&(r=-r),null!==c)return null!==h&&(cancelAnimationFrame(h),h=null),null!==m&&(clearInterval(m),m=null),void(f=setTimeout((()=>(y(),p())),c))}null===o&&(h=requestAnimationFrame(v)),y()}function y(){d.i.valueAsNumber=(d.i.valueAsNumber+r+n.length)%n.length,d.i.dispatchEvent(new CustomEvent("input",{bubbles:!0}))}return d.i.oninput=e=>{e&&e.isTrusted&&g()&&b(),d.value=n[d.i.valueAsNumber],d.o.value=a(d.value,d.i.valueAsNumber,n)},d.b.onclick=()=>{if(g())return b();r=u&&d.i.valueAsNumber===n.length-1?-1:1,d.i.valueAsNumber=(d.i.valueAsNumber+r)%n.length,d.i.dispatchEvent(new CustomEvent("input",{bubbles:!0})),p()},d.i.oninput(),l?p():b(),t.disposal(d).then(b),d}}function U(e,t){const n=e.module();return n.variable(t()).define(["md"],S),n.variable(t()).define(["md"],D),n.variable(t("viewof i")).define("viewof i",["Scrubber","numbers"],M),n.variable(t("i")).define("i",["Generators","viewof i"],((e,t)=>e.input(t))),n.variable(t("numbers")).define("numbers",j),n.variable(t()).define(["md","i"],L),n.variable(t()).define(["md"],q),n.variable(t()).define(["md"],P),n.variable(t("autoplay")).define("autoplay",["md"],A),n.variable(t()).define(["Scrubber","numbers"],T),n.variable(t("loop")).define("loop",["md"],I),n.variable(t()).define(["Scrubber","numbers"],$),n.variable(t()).define(["md"],z),n.variable(t()).define(["Scrubber","numbers"],J),n.variable(t("delay")).define("delay",["md"],W),n.variable(t()).define(["Scrubber"],O),n.variable(t("loopDelay")).define("loopDelay",["md"],B),n.variable(t()).define(["Scrubber","numbers"],N),n.variable(t("format")).define("format",["md"],G),n.variable(t("dates")).define("dates",F),n.variable(t("viewof date")).define("viewof date",["Scrubber","dates"],C),n.variable(t("date")).define("date",["Generators","viewof date"],((e,t)=>e.input(t))),n.variable(t()).define(["md"],E),n.variable(t()).define(["md"],R),n.variable(t("Scrubber")).define("Scrubber",["html","Inputs"],H),n}function V(e){return e`# Teaching Materials Science Concepts using the (d3-)force
#### Georgios Varnavides*  
---
*Content initially created in collaboration with Craig Carter and Amina Matt using the Wolfram Language
`}function X(e){return e`
## Introduction
>If, in some cataclysm, all of scientific knowledge were to be destroyed, and only one sentence passed on to the next generations of creatures, what statement would contain the most information in the fewest words? I believe it is the atomic hypothesis (or the atomic fact, or whatever you wish to call it) that all things are made of atoms - little particles that move around in perpetual motion, attracting each other when they are a little distance apart, but repelling upon being squeezed into one another. In that one sentence, you will see, there is an enormous amount of information about the world, if just a little imagination and thinking are applied.

Richard Feynman, The Feynman Lectures on Physics, Chapter 1, Volume I (Feynman, Leighton, and Sands)
`}function Y(e){return e`
## Reference

- [Lennard-Jones Potential](#lennardJonesPotentialDoc)
- [1D Lattice Vibrations](#latticeVibrationsDoc)
- [Surface Energy](#surfaceEnergyDoc)
- [Compression Waves And Symmetry Breaking](#compressionWavesDoc)
- [Dislocations](#dislocationsDoc)
- [Beyond Lennard-Jones Potentials](#beyondLJDoc)
- [Playground](#playgroundDoc)

`}function Q(e){return e`## [#](#lennardJonesPotentialDoc) Lennard-Jones Potential [<>](https://observablehq.com/@gvarnavi/teaching-materials-science-concepts-using-the-d3-force#lennardJonesPotentialDoc)

The [Lennard-Jones potential](https://en.wikipedia.org/wiki/Lennard-Jones_potential) is a model for a particle's potential energy when it is separated from another particle. 

The model is simple - particles attract each other when they are far apart and repel when they are very near. Nevertheless, the information that we will compute and visualize is enormous - especially when there are many interacting particles.

All of the physics and its consequences derive from the shape of the potential:
`}function K(e){return e.checkbox(["show schematics","plot energy","plot force"],{value:["show schematics","plot energy"]})}function Z(e,t,n,a){let i=[e.ruleX([1],{stroke:"black"}),e.ruleY([0],{stroke:"black"})];return t.includes("show schematics")&&(i=[...i,[e.image(n,{x:"x",y:"y",src:"src",width:200})]]),t.includes("plot energy")&&(i=[...i,[e.line(a,{x:"rho",y:"energy",stroke:"#4e79a7"}),e.crosshairX(a,{x:"rho",y:"energy",ruleStroke:"#4e79a7",ruleStrokeWidth:2,ruleStrokeOpacity:.25}),e.text(a.slice(a.length-1),{x:"rho",y:"energy",text:["Energy"],fill:"#4e79a7",dy:10})]]),t.includes("plot force")&&(i=[...i,[e.line(a,{x:"rho",y:"force",stroke:"#e15759"}),e.crosshairX(a,{x:"rho",y:"force",ruleStroke:"#e15759",ruleStrokeWidth:2,ruleStrokeOpacity:.25}),e.text(a.slice(a.length-1),{x:"rho",y:"force",text:["Force"],fill:"#e15759",dy:15})]]),e.plot({width:500,aspectRatio:12.5,x:{domain:[.75,1.5],label:"interatomic distance"},y:{domain:[-2.75,2.75],grid:!0,label:"potential"},style:{fontSize:"12px"},marks:i})}function ee(e){return e`When the distance is small, the potential **energy** decreases with increasing distance. The **force** is positive and repulsive because force is minus the gradient of potential energy.

When the distance is large, the potential **energy** slope is positive and so the **force** is negative: the particles attract.  

We could construct manyfunctions that behave like this; the Lennard-Jones potential is a simple choice. 
`}function te(e,t){return e`
### Non-Dimensional Form
Mathematically, the Lennard-Jones potential is given by a linear combination of two terms:
- An attractive term that goes to zero as ${t`-\frac{1}{r^6}`} as ${t`r \rightarrow \infty`}
- A repulsive term that goes to infinity as ${t`\frac{1}{r^{12}}`} as ${t`r \rightarrow 0`}
`}function ne(e){return e.block`U_{ljp} = \frac{a}{r^{12}} + \frac{b}{r^6}`}function ae(e,t){return e`
with ${t`a`} and ${t`b`} being material-properties we could extract using experimental observations.

While this form is useful in investigating material-specific behaviour, we wish to understand the dynamics of materials with this **family** of interatomic potentials. To do this, we can instead derive a general form by non-dimensionalizing our potential by:
1. introducing a non-dimensional length ${t`\rho = \frac{r}{r_{min}}`}
2. dividing the potential by an energy minimum ${t`e_{min}`}
`}function ie(e){return e.block`\tilde{U}_{ljp} = \frac{1}{\rho^{12}}-\frac{2}{\rho^6}`}function re(e){return e`
### Harmonic Approximation
The plotting range above is slightly misleading. Most of the time, atoms like to be close the energy minimum and fluctuate around that position.

Therefore, before we tackle the full problem - it's instructive to look for an approximate solution near the energy minimum. We can do so by expanding near the bottom of the energy well to second order and obtain the following parabolic (or harmonic) approximation:
`}function oe(e){return e.block`\tilde{U}_{\textrm{harmonic}} = -1 + 36\left(\rho -1\right)^2 + \mathcal{O}\left(\rho-1\right)^3`}function le(e){return e.checkbox(["show schematics","plot energy","plot harmonic approximation"],{value:["show schematics","plot energy","plot harmonic approximation"]})}function se(e,t,n,a){let i=[e.ruleX([1],{stroke:"black"}),e.ruleY([0],{stroke:"black"})];return t.includes("show schematics")&&(i=[...i,[e.image(n,{x:"x",y:"y",src:"src",width:200})]]),t.includes("plot energy")&&(i=[...i,[e.line(a,{x:"rho",y:"energy",stroke:"#4e79a7"}),e.crosshairX(a,{x:"rho",y:"energy",ruleStroke:"#4e79a7",ruleStrokeWidth:2,ruleStrokeOpacity:.25}),e.text(a.slice(a.length-1),{x:"rho",y:"energy",text:["Energy"],fill:"#4e79a7",dy:10})]]),t.includes("plot harmonic approximation")&&(i=[...i,[e.line(a,{x:"rho",y:"harmonic",stroke:"#e15759"}),e.crosshairX(a,{x:"rho",y:"harmonic",ruleStroke:"#e15759",ruleStrokeWidth:2,ruleStrokeOpacity:.25}),e.text(a.slice(a.length-175,a.length-174),{x:"rho",y:"harmonic",text:["Harmonic"],fill:"#e15759",dx:35})]]),e.plot({width:500,aspectRatio:12.5,style:{fontSize:"12px"},x:{domain:[.75,1.5],label:"interatomic distance"},y:{domain:[-2.75,2.75],grid:!0,label:"energy"},marks:i})}function ce(e){return e`---

## [#](#latticeVibrationsDoc) 1D Lattice Vibrations [<>](https://observablehq.com/@gvarnavi/teaching-materials-science-concepts-using-the-d3-force#latticeVibrationsDoc)

Let's start by looking at a (finite) one-dimensional lattice with fixed ends. We will consider two treatments:
1. Small amplitude vibrations
  - atoms interact only with their nearest neighbors
  - as if they're masses attached with springs (Harmonic approximation)
2. Larger amplitude vibrations (atoms interact via the Lennard-Jones potential)
`}function ue(e,t,n){return e`
### 1. Harmonic Approximation
We make a one-dimensional lattice with ${t+1} atoms and start the simulation by displacing the atoms using an initial sine-wave pattern.

__Note:__ We're exaggerating the displacements by a factor of ${Math.round(1/n)} for visual clarity.`}function de(e){return e.button("(re)Start Simulation")}function he(e,t,n,a,i,r,o,l,s,c,u){const d=e.select(t.svg(n.width,n.width/8)),h=a.map((e=>Object.create(e))),f=i.map((e=>Object.create(e))),m=r;let p=0;d.attr("viewBox",[-2.5,-2.5,o+5,5]);const b=e.forceSimulation(h).force("link",e.forceLink(f).distance(1).iterations(0)).alphaDecay(0).velocityDecay(0).dt(.5),[g,v]=l(d,h,null,!1,!1);return g.attr("opacity",(e=>null==e.fx?.5:1)).attr("fill",(e=>null==e.fx?"gray":"black")),b.on("tick",(()=>{(p++>750||0==m)&&b.stop(),"horizontal"==s?g.attr("cx",(e=>e.x+(e.x-e.index)/c)).attr("cy",(e=>e.y)):g.attr("cx",(e=>e.index)).attr("cy",(e=>(e.x-e.index)/c))})),u.then((()=>b.stop())),d.node()}function fe(e){return e`
We chose an initial sine-wave displacement in anticipation of the behaviour being periodic in space (and time). In particular, we moved each atom from its equilibrium position by the function:`}function me(e,t,n){return e.plot({width:t.width,height:t.width/8,marginRight:40,x:{grid:!0,label:"Normalized position along chain \u2192"},y:{grid:!0,label:"\u2191 Normalized displacement"},marks:[e.line(n,{x:"x",y:"y"})]})}function pe(e){return e`
What if we started with fewer/more 'nodes' along our initial displacement?
Change the value fo the sub-harmonic mode below to see how this influences the vibrations!
`}function be(e){return e.range([1,6],{step:1,label:"Sub-harmonic",value:3})}function ge(e){return e`
The visualization using horizontal displacements is hard to see. Let's instead plot the displacements of each atom away from its equilibrium position vertically. 

__Note:__ The physics is still in the horizontal direction!`}function ve(e){return e.radio(["horizontal","vertical"],{label:"Oscillation direction",value:"horizontal"})}function ye(e){return e`
### Dispersion Relations
We were running the above simulation for a fixed time, but notice how the behaviour is periodic in time. Let's write a helper function to extract that period and stop the simulation.

The function __compute_single_period()__ calculates one period of oscillation given a particular sub-harmonic mode number:
`}function _e(e,t,n){return function(a,i,r,o,l){if(0==i||Math.abs(i)==a)return 1/0;Math.abs(i)==a/2&&(i+=1),null==r&&(r=e),null==o&&(o=.0075),null==l&&(l=5e3);let s,c,u=[r],d=0;[s,c]=t(a,i,r);const h=s.map((e=>Object.create(e))),f=c.map((e=>Object.create(e))),m=n.forceSimulation(h).force("link",n.forceLink(f).distance(1).iterations(0)).alphaDecay(0).velocityDecay(0).dt(o);do{d++,m.tick();const e=h.map((e=>e.x-e.index));u.push(e.reduce(((e,t)=>e+t*t)))}while(d<l&&u[d]-u[d-1]<0);return m.stop(),(d-1)*o}}function we(e,t,n,a){return e`
For example it takes ${t(n,a)} (dimensionless) time-units to do a single periodic oscillation for the ${a}th sub-harmonic mode for ${n} atoms!

\`\`\`javascript
compute_single_period(num_of_atoms,sub_harmonic)
\`\`\`
${t(n,a)}
`}function xe(e,t,n){return e`
Let's do this for all sub-harmonic modes in the range [${-t/2-5},${t+5}]   
and plot the frequency ${n`\left(\frac{2\pi}{\mathrm{period}}\right)`} against the wave-vector ${n`\left( \frac{2 \pi \times \mathrm{sub-harmonic\;mode}}{\mathrm{number\;of\;atoms}}\right)`}  
for each sub-harmonic mode:
`}function ke(e,t,n,a){let i=e;return t.markCircle({size:50}).data(n).params(i).encode(t.x().fieldQ("wavevector"),t.y().fieldQ("frequency"),t.color().if(i,t.value("steelblue")).value("lightgrey")).width(a.width/2).render()}function Se(e){return e`
What we just plotted is called a dispersion relation. 

Let's get a sense of what it means for our lattice vibrations. Try hovering over one of the points in the dispersion plot and notice how the wavelength (inversely related to the wavevector) and frequency (inversely related to the period) change below!
`}function De(e,t,n,a,i,r,o,l,s,c,u){const d=e.select(t.svg(n.width,n.width/8)),[h,f]=a(i,r,o);let m=0;d.attr("viewBox",[-2.5,-2.5,i+5,5]);const p=e.forceSimulation(h).force("link",e.forceLink(f).distance(1).iterations(0)).alphaDecay(0).velocityDecay(0).dt(.25),[b,g]=l(d,h,null,!1,!1);return b.attr("opacity",(e=>null==e.fx?.5:1)).attr("fill",(e=>null==e.fx?"gray":"black")),p.on("tick",(()=>{m++>750&&p.stop(),"horizontal"==s?b.attr("cx",(e=>e.x+(e.x-e.index)/c)).attr("cy",(e=>e.y)):b.attr("cx",(e=>e.index)).attr("cy",(e=>(e.x-e.index)/c))})),u.then((()=>p.stop())),d.node()}function Me(e,t){return e`
Sub-harmonic mode:${t}
`}function je(e,t){return e`
The dispersion behaviour is periodic in the domain ${t`\left(-\frac{\pi}{a},\frac{\pi}{a}\right)`}, where _a_ is the lattice spacing (${t`a=1`} in our case).

This periodic domain is called the __first Brillouin zone__ and it turns out to be a very useful property in materials science.
`}function Le(e){return e`
### 2. Lennard Jones Vibrations
Let's run the same 1D-lattice simulation using the Lennard-Jones potential instead.
This means our particles interact according to second, third, etc. nearest neighbor interactions - making the behaviour nonlinear!
`}function qe(e){return e.button("(re)Start Simulation")}function Pe(e,t,n,a,i,r,o,l,s,c,u,d){const h=e.select(t.svg(n.width,n.height/3)),f=a,[m,p]=i(r,o,l);let b=0;h.attr("viewBox",[-2.5,-2.5,r+5,5]);const g=e.forceSimulation(m).force("lennard-jones-BH",e.forceLennardJonesPotential().theta(.25)).alphaDecay(0).velocityDecay(0).dt(.025),[v,y]=s(h,m,null,!1,!1,c);return g.on("tick",(()=>{(b++>750||0==f)&&g.stop(),"horizontal"==u?v.attr("cx",(e=>e.x+(e.x-e.index)/l)).attr("cy",(e=>e.y)).attr("fill",(e=>c(e.energy))):v.attr("cx",(e=>e.index)).attr("cy",(e=>(e.x-e.index)/l)).attr("fill",(e=>c(e.energy)))})),d.then((()=>g.stop())),h.node()}function Ae(e){return e.range([.0125,.05],{step:.0125,label:"Oscillation Magnitude",value:.0125})}function Te(e){return e`
The larger the initial oscillation magnitude - the further away from the harmonic approximation we sample, and thus the more nonlinear behaviour. Try running the simulation above using larger and larger oscillation magnitudes.  

__Note:__ The actual oscillation is normalized to be the same in all cases (to allow easier comparison), but notice how the vibrations quickly become nonlinear for larger values!`}function Ie(e,t,n){return e({color:t,title:"Lennard-Jones energy 1D",width:n.width/2})}function $e(e){return e`
__Note:__ Finally, notice we've colored each atom according to their Lennard-Jones potential energy.
The colors fluctuate as atoms move from high (red) to low (blue) energies, but our fixed edge atoms appear to be mostly in a state of higher energy.

This because they only have one nearest neighbor (as opposed to two like the 'bulk' atoms), and give us a hint as to the physical origin of surface tension!
`}function ze(e){return e`---

## [#](#surfaceEnergyDoc) Surface Energy [<>](https://observablehq.com/@gvarnavi/teaching-materials-science-concepts-using-the-d3-force#surfaceEnergyDoc)

Let's investigate this surface-energy effect by looking at larger interacting systems.
For example, some atoms on a square lattice.
`}function Je(e,t,n,a,i,r,o){const l=e.select(t.svg(n.width,n.height)),s=a.map((e=>Object.create(e)));l.attr("viewBox",[-10,-10,20,20]),e.forceSimulation(s).force("lennard-jones-BH",e.forceLennardJonesPotential().theta(0)).alphaDecay(0).velocityDecay(0).dt(.0125).tick().stop();const[c,u]=i(l,s,null,!1,!1,r);return o.value=e.sum(s.map((e=>e.energy))),l.node()}function We(e,t,n){return e({color:t,title:"Lennard-Jones energy 2D",width:n.width/2})}function Oe(e){return e`
We've again colored each atom by their total energy, with red being 'higher' energy and dark blue being 'lower' energy. It's evident that the atoms on the surface have a higher energy! 

We can think about this by counting 'satisfied' and 'dangling' bonds. The atoms inside the 'bulk' of the particle all have 4 nearest neighbors (blue), the atoms on the edges of the particle have 3 nearest neighbors (green), while the atoms in the corners of the particle only have two nearest neighbors (orange).
`}function Be(e){return e`
### Surface energy anisotropy
We started with a square-particle above, and found that energy is related to its geometry and nearest-neighbour configurations.  

What can this tell us about the directional anisotropy of the particle's facets? E.g. are 90 degree facets higher or lower energy than 45 degree facets? Let's find out!
`}function Ne(e,t,n,a,i,r,o,l){const s=e.select(t.svg(n.width,n.height)),c=a/180*Math.PI,[u,d]=i(r,c);s.attr("viewBox",[-10,-10,20,20]),e.forceSimulation(u).force("lennard-jones-BH",e.forceLennardJonesPotential().theta(0)).alphaDecay(0).velocityDecay(0).dt(0).tick().stop(),e.forceSimulation(d).force("lennard-jones-BH",e.forceLennardJonesPotential().theta(0)).alphaDecay(0).velocityDecay(0).dt(0).tick().stop(),u.forEach((e=>{e.x-=Math.sin(c),e.y+=Math.cos(c)})),d.forEach((e=>{e.x+=Math.sin(c),e.y-=Math.cos(c)}));const[h,f]=o(s,[...u,...d],null,!1,!1,l);return s.append("line").style("stroke","black").style("stroke-width",.05).style("stroke-dasharray",.25).attr("x1",12.5*Math.cos(c)).attr("y1",12.5*Math.sin(c)).attr("x2",-12.5*Math.cos(c)).attr("y2",-12.5*Math.sin(c)),s.node()}function Ge(e){return e.range([-90,90],{label:"Slice angle",value:-30})}function Fe(e){return e`
Try moving the slice angle slider above, which splits our square particle down the middle. Can you guess which angles will lead to higher/lower energy facets?
`}function Ce(e){return e`
The surface energy is given by the additional energy the sliced particle has, as compared to the bulk energy of the particle before slicing:
`}function Ee(e){return e.block`\frac{E_{\mathrm{particle}} - N E_{\mathrm{bulk}}}{2 A}`}function Re(e,t){return e`
where ${t`N`}, ${t`A`} are the number of particles and area of the cleaved surface respectively.  
We can write a function to compute the surface energy for a particular orientation:
`}function He(e,t,n,a){return(i,r)=>{const o=r/180*Math.PI;let l=16;l=Math.abs(r)<45?Math.sqrt(256+256*Math.abs(Math.tan(o))):Math.sqrt(256+256*Math.abs(1/Math.tan(o)));const[s,c]=e(t,o);return n.forceSimulation(s).force("lennard-jones-BH",n.forceLennardJonesPotential().theta(0)).alphaDecay(0).velocityDecay(0).dt(0).tick().stop(),n.forceSimulation(c).force("lennard-jones-BH",n.forceLennardJonesPotential().theta(0)).alphaDecay(0).velocityDecay(0).dt(0).tick().stop(),(n.sum([...s,...c].map((e=>e.energy)))-a)/2}}function Ue(e,t,n,a){return e`
For example cleaving along ${t}° leads to a (dimensionless) surface energy cost of ${n(a,t)}

\`\`\`javascript
compute_average_energy(square_lattice,theta_in_deg)
\`\`\`
${n(a,t)}
`}function Ve(e){return e`
Let's do this for all angles in the range [-180°,180°] and plot the surface energy as a polar plot!
`}function Xe(e,t){return e.plot({x:{axis:null},y:{axis:null},marks:[e.ruleX([0],{stroke:"black"}),e.ruleY([0],{stroke:"black"}),e.dot(t,{x:"x",y:"y",fill:"steelblue",r:7.5})],width:400,height:400,marginLeft:10,marginTop:10,marginRight:10,marginBottom:10})}function Ye(e){return e`
Note that:
1. Our surface energy plot has (as expected) square symmetry
2. 90° facets are indeed the lowest energy surfaces
`}function Qe(e){return e`
### Lattice Instabilities
The square lattice we've constructed above however, cannot be stabilized purely by central forces (like the Lennard-Jones) and is mechanically unstable in 2D.

It turns out, any slight perturbation (here due to our surface-energy terms, but the same would also happen due to thermal fluctuations in large ('infinite') lattices), will lead to the atoms re-arranging in a 2D closed-packed arrangement!
`}function Ke(e){return e.button("(re)Start Simulation")}function Ze(e,t,n,a,i,r,o,l){const s=e.select(t.svg(n.width,n.height)),c=a.map((e=>Object.create(e))),u=i;let d=0;s.attr("viewBox",[-10,-10,20,20]);const h=e.forceSimulation(c).force("lennard-jones-BH",e.forceLennardJonesPotential().theta(.25).distanceMax(1.5)).alphaDecay(0).velocityDecay(0).dt(.0125),[f,m]=r(s,c,null,!1,!1,o);return h.on("tick",(()=>{(d++>250||0==u)&&h.stop(),f.attr("cx",(e=>e.x)).attr("cy",(e=>e.y)).attr("fill",(e=>o(e.energy)))})),l.then((()=>h.stop())),s.node()}function et(e,t,n){return e({color:t,title:"Lennard-Jones energy 2D",width:n.width/2})}function tt(e){return e`
__Note:__ Most atoms (especially in the corners) have re-arranged themselves to have ~6 nearest neighbors!`}function nt(e){return e`---

## [#](#compressionWavesDoc) Compression Waves and Symmetry Breaking [<>](https://observablehq.com/@gvarnavi/teaching-materials-science-concepts-using-the-d3-force#compressionWavesDoc)

We'll continue our exploration by looking at stable hexagonal close-packed lattices.
In particular, we'll focus on a rotating nanoparticle.
`}function at(e){return e`### Compression Waves
Let's start our nanoparticle spinning at a slow* rate.
Try running the animation below, and notice the compression waves which form as the particle spins.

*Under normal conditions, most particles would not spin this fast - but we're exploring the physics here, and it helps to exaggerate.`}function it(e){return e.button("(re)Start Simulation")}function rt(e,t,n,a,i,r,o,l,s){const c=e.select(t.svg(n.width,n.height)),u=a.map((e=>Object.create(e))),d=i;c.attr("viewBox",[-12.5,-12.5,25,25]);const h=e.forceSimulation(u).force("lennard-jones-BH",e.forceLennardJonesPotential().theta(.125).distanceMax(1.75)).alphaDecay(0).velocityDecay(0).dt(.05);h.counter=0;const[f,m]=r(c,u,null,!1,!1,o);return f.call(l(h)),h.on("tick",(()=>{(h.counter++>500||0==d)&&h.stop(),f.attr("cx",(e=>e.x)).attr("cy",(e=>e.y)).attr("fill",(e=>o(e.energy)))})),s.then((()=>h.stop())),c.node()}function ot(e,t,n){return e({color:t,title:"Lennard-Jones energy 2D",width:n.width/2})}function lt(e){return e.range([.225,.325],{step:.0125,label:"Nanoparticle Initial Velocity",value:.25})}function st(e){return e`Let's crank up the initial rotation speed to see how the forces 'rip' the particle apart.

You might notice the end result no-longer has six-fold symmetry.`}function ct(e){return e`__Note:__ The simulation above is interactive!  
Try running the simulation again and dragging one of the atoms (ever so slightly, closed-packed particles experience high forces!)`}function ut(e){return e`---

## [#](#dislocationsDoc) Dislocations [<>](https://observablehq.com/@gvarnavi/teaching-materials-science-concepts-using-the-d3-force#dislocationsDoc)

Let's push our simulation to the limit, by _literally_ pushing particles into one another - e.g. in an indentation experiment.
`}function dt(e){return e(75)}function ht(e,t,n,a,i,r,o){const l=e.select(t.svg(n.width,n.height)),s=a[i];l.attr("viewBox",[-15,-7.5,30,22.5]);const[c,u]=r(l,s,null,!1,!1,o);return l.node()}function ft(e,t,n){return e({color:t,title:"Lennard-Jones energy 2D",width:n.width/2})}function mt(e){return e`
__Note:__ Run the slider again slowly, and notice the lines of high energy starting to form near the indenter.
As particles get pushed out of their equilibrium positions, the indenter creates extra 'half-planes' of atoms which need to be accommodated in the lattice.

These are dislocations starting to form, and it's how materials deform plastically!
`}function pt(e){return e`---

## [#](#beyondLJDoc) Beyond Lennard-Jones Potentials [<>](https://observablehq.com/@gvarnavi/teaching-materials-science-concepts-using-the-d3-force#beyondLJDoc)

The Lennard-Jones potential is just a model to guide our exploration of simple physics. There is no (real) justification for its precise form.  

In fact, the choice of the function won't affect the results very much - any potential function with the repulsive/attractive shape above will produce similar consequences.

Let's test that!
`}function bt(e){return e`### Generalized Lennard-Jones Potential
Sometimes the Lennard-Jones Potential is called a 6-12 potential because of the exponents used.
This generalizes nicely to _nm_-potentials, where _n_ and _m_ refer to the exponents in the interatomic potential:
`}function gt(e){return e.block`\tilde{U}_{g-ljp}(\rho) = \frac{n \rho^{-m}-m \rho^{-n}}{m-n}`}function vt(e,t){return e.plot({x:{domain:[.75,1.5],label:"Normalized Interatomic Distance, \u03c1 \u2192"},y:{domain:[-2.75,2.75],grid:!0,label:null},marks:[e.line(t,{x:"rho",y:"lj_energy",stroke:"#4e79a7"}),e.line(t,{x:"rho",y:"generalized_energy",stroke:"#e15759"}),e.ruleX([1],{stroke:"black"}),e.text(t.slice(t.length-1),{x:"rho",y:"lj_energy",text:["LJ Energy"],fill:"#4e79a7",dy:"-1.5em"}),e.text(t.slice(t.length-50,t.length-49),{x:"rho",y:"generalized_energy",text:["Generalized Energy"],fill:"#e15759",dy:"-5em"})]})}function yt(e){return e.range([6,16],{value:14,step:1,label:"Repulsive Power"})}function _t(e){return e.range([3,8],{value:4,step:1,label:"Attractive Power"})}function wt(e){return e.button("(re)Start Simulation")}function xt(e,t,n,a,i,r,o,l,s,c,u){const d=e.select(t.svg(n.width,n.height)),h=a.map((e=>Object.create(e))),f=i;d.attr("viewBox",[-12.5,-12.5,25,25]);const m=e.forceSimulation(h).force("lennard-jones-BH",e.forceLennardJonesPotential().theta(.125).distanceMax(1.75).attractivePower(r).repulsivePower(o)).alphaDecay(0).velocityDecay(0).dt(.05);m.counter=0;const[p,b]=l(d,h,null,!1,!1,s);return p.call(c(m)),m.on("tick",(()=>{(m.counter++>250||0==f)&&m.stop(),p.attr("cx",(e=>e.x)).attr("cy",(e=>e.y)).attr("fill",(e=>s(e.energy)))})),u.then((()=>m.stop())),d.node()}function kt(e){return e`### Morse Potential
We're also not restricted to LJ-type potentials. The extended \`d3-force-md\` module we're using can also handle general central-body potentials given a general function and its (2D) gradient.  
E.g. we can look at the closely related Morse-potential:
`}function St(e){return e.block`
\begin{aligned}
\tilde{U}_{Morse}(\rho) &= e^{-2 a (\rho -1)}-2 e^{a (1-\rho )} \\
\frac{\tilde{U}_{Morse}'(\rho)}{\rho} &= \frac{2 a e^{a (1-\rho )}-2 a e^{-2 a (\rho -1)}}{\rho }
\end{aligned}`}function Dt(e,t){return e.plot({x:{domain:[.75,1.5],label:"Normalized Interatomic Distance, \u03c1 \u2192"},y:{domain:[-2.75,2.75],grid:!0,label:null},marks:[e.line(t,{x:"rho",y:"lj_energy",stroke:"#4e79a7"}),e.line(t,{x:"rho",y:"morse_energy",stroke:"#e15759"}),e.ruleX([1],{stroke:"black"}),e.text(t.slice(t.length-1),{x:"rho",y:"lj_energy",text:["LJ Energy"],fill:"#4e79a7",dy:"-1.5em"}),e.text(t.slice(t.length-50,t.length-49),{x:"rho",y:"morse_energy",text:["Morse Energy"],fill:"#e15759",dy:"-5em"})]})}function Mt(){return e=>Math.exp(20-20*e)-2*Math.exp(10-10*e)}function jt(){return e=>20*Math.exp(10-20*e)*(Math.exp(10*e)-Math.exp(10))/e}function Lt(e){return e.button("(re)Start Simulation")}function qt(e,t,n,a,i,r,o,l,s,c,u){const d=e.select(t.svg(n.width,n.height)),h=a.map((e=>Object.create(e))),f=i;d.attr("viewBox",[-12.5,-12.5,25,25]);const m=e.forceSimulation(h).force("morse-potential",e.forceCentralPotential().theta(.125).distanceMax(1.75).potentialFunction(r).gradientFunction(o)).alphaDecay(0).velocityDecay(0).dt(.05);m.counter=0;const[p,b]=l(d,h,null,!1,!1,s);return p.call(c(m)),m.on("tick",(()=>{(m.counter++>250||0==f)&&m.stop(),p.attr("cx",(e=>e.x)).attr("cy",(e=>e.y)).attr("fill",(e=>s(e.energy)))})),u.then((()=>m.stop())),d.node()}function Pt(e){return e`---

## [#](#playgroundDoc) Playground [<>](https://observablehq.com/@gvarnavi/teaching-materials-science-concepts-using-the-d3-force#playgroundDoc)

Your turn!  

Use the canvas to below to draw a particle shape by clicking to add vertices.
Once you're satisfied with your shape, scroll down to play around with your particle by dragging (remember, ever so slightly) some of the atoms.  

Have fun!
`}function At(e){return e.button("Clear Drawing")}function Tt(e,t,n,a,i){let r=[];t.value=[];const o=n.select(a.svg(i.width/2,i.height/2)),l=i.height/i.width;o.attr("viewBox",[-10.5,-10.5,21,21]);o.append("rect").attr("x",-10.5/l).attr("y",-10.5).attr("width",21/l).attr("height",21).on("mousemove",(function(e){const t=o.selectAll(".tracker").data([n.pointer(e)]);if(t.enter().append("circle").attr("class","tracker").attr("r",.25).attr("stroke-width",.05).merge(t).attr("transform",(e=>`translate(${e})`)),r.length){const t=r.slice();t.push(n.pointer(e)),t.push(r[0]);const a=o.selectAll(".polyline").data([t]);a.enter().append("polygon").attr("class","polyline").attr("stroke-width",.1).merge(a).attr("points",(e=>e.join(" ")))}})).on("click",(function(e){r.push(n.pointer(e)),t.value=[...r,n.pointer(e)];const a=o.selectAll(".vertex").data(r);a.enter().append("circle").attr("class","vertex").attr("r",.25).attr("stroke-width",.05).merge(a).attr("transform",(e=>`translate(${e})`));const i=o.selectAll(".polygon").data([r]);i.enter().append("polygon").attr("class","polygon").merge(i).attr("stroke-width",.1).attr("points",(e=>e.join(" ")))}));return o.node()}function It(e){return e.button("(re)Start Simulation")}function $t(e,t,n,a,i,r,o,l,s,c,u){const d=e.select(t.svg(n.width,n.height)),h=a.map((e=>Object.create(e))).filter((e=>i.pointInPolygon([e.x,e.y],r)));d.attr("viewBox",[-10.5,-10.5,21,21]);const f=e.forceSimulation(h).force("lennard-jones-BH",e.forceLennardJonesPotential().theta(.125).distanceMax(1.5)).alphaDecay(0).velocityDecay(0).dt(.05).tick();f.counter=0;const[m,p]=l(d,h,null,!1,!1,s);return m.call(c(f)),f.on("tick",(()=>{f.counter++>500&&f.stop(),m.attr("cx",(e=>e.x)).attr("cy",(e=>e.y)).attr("fill",(e=>s(e.energy)))})),u.then((()=>f.stop())),d.node()}function zt(e){return e`---`}function Jt(e){return e`---`}function Wt(e){return e`
---
## Utility Functions`}function Ot(e){return e`### Imports`}function Bt(e){return e("d3@6","d3-force-md@2.2.2")}function Nt(e){return e`[\`d3-force-md\` Documentation](https://observablehq.com/@gvarnavi/d3-force-md-documentation?collection=@gvarnavi/d3-force-md) `}function Gt(e){return e("geometric@2")}function Ft(e){return e`### Plots`}async function Ct(e){return[{x:.875,y:-2,src:"https://corsproxy.io/?"+await e("spring_compressed@1.svg").url()},{x:1.1,y:2,src:"https://corsproxy.io/?"+await e("spring_equilibrium@1.svg").url()},{x:1.375,y:1,src:"https://corsproxy.io/?"+await e("spring_expanded@1.svg").url()}]}function Et(e){return e.range(.75,1.5,.00125).map((e=>({rho:e,energy:Math.pow(e,-12)-2*Math.pow(e,-6),force:12*Math.pow(e,-13)-12*Math.pow(e,-7),harmonic:36*Math.pow(e-1,2)-1})))}function Rt(e,t,n){return e.range(.75,1.5,.00125).map((e=>({rho:e,lj_energy:Math.pow(e,-12)-2*Math.pow(e,-6),generalized_energy:(t*Math.pow(e,-n)-n*Math.pow(e,-t))/(n-t)})))}function Ht(e,t){return e.range(.75,1.5,.00125).map((e=>({rho:e,lj_energy:Math.pow(e,-12)-2*Math.pow(e,-6),morse_energy:t(e)})))}function Ut(e){return[...Array(201)].map(((t,n)=>({x:n/200,y:Math.sin(e*(2*Math.PI*n)/200)})))}function Vt(e,t,n){return e.range(-t/2-5,t+5).map((e=>({wavevector:2*Math.PI*e/t,frequency:2*Math.PI/n(t,e)})))}function Xt(e){return e.selectPoint().on("mouseover").fields("wavevector").nearest("true")}function Yt(e,t,n){return e.observe((e=>{e([]);const a=t.name(),i=(t,n)=>e(n?.vlPoint?.or??[]);return n.addSignalListener(a,i),()=>n.removeSignalListener(a,i)[0]}))}function Qt(e){return e`### 1D Lattice`}function Kt(){return 50}function Zt(){return.0125}function en(e,t,n){return[...Array(e+1)].map(((a,i)=>({x:i+t*Math.sin(n*(2*Math.PI*i)/e),y:0,fy:0}))).map((t=>0==t.x||t.x==e?{x:t.x,fx:t.x,y:t.y,fy:t.y}:t))}function tn(e){return[...Array(e)].map(((e,t)=>({source:t,target:t+1})))}function nn(){return function(e,t,n){return[[...Array(e+1)].map(((a,i)=>({x:i+n*Math.sin(t*(2*Math.PI*i)/e),y:0,fy:0}))).map((t=>0==t.x||t.x==e?{x:t.x,fx:t.x,y:t.y,fy:t.y}:t)),[...Array(e)].map(((e,t)=>({source:t,target:t+1})))]}}function an(e,t){return 0==e.length?0:"wavevector"in e[0]?Math.round(e[0].wavevector*t/(2*Math.PI)):0}function rn(e){return e.scaleSequential(e.interpolateTurbo).domain([-3.075,-3.025])}function on(e){return e`### Square Lattice`}function ln(e){return e.scaleSequential(e.interpolateTurbo).domain([-7,-2])}function sn(){return[...Array(289)].map(((e,t)=>({x:.975*(t%17-8),y:.975*(Math.floor(t/17)-8)})))}function cn(){return(e,t)=>{const n=e.map((e=>Object.create(e)));let a,i;return a=n.filter((e=>Math.tan(t%Math.PI)*(e.x+1e-6)<e.y)),i=n.filter((e=>!a.includes(e))),[a,i]}}function un(){return null}function dn(e,t,n){return e.range(0,90,7.5).map((e=>({theta:e,energy:t(n,e)})))}function hn(e,t){return e.range(0,360,7.5).map(((e,n)=>({x:t[n%t.length].energy*Math.cos(e*Math.PI/180),y:t[n%t.length].energy*Math.sin(e*Math.PI/180)})))}function fn(e){return e`### Hexagonal Lattice`}function mn(){return(e,t)=>e.reduce(((e,n,a)=>e+Math.pow(n-t[a],2)),0)}function pn(){return[[1,0],[.5,Math.sqrt(3)/2]]}function bn(e,t,n){return[...Array(625)].map(((e,t)=>({x:t%25-12,y:Math.floor(t/25)-12}))).map((t=>({x:t.x*e[0][0]+t.y*e[1][0],y:t.x*e[0][1]+t.y*e[1][1]}))).filter((e=>t([e.x,e.y],[0,0])<100)).map((e=>({...e,vx:n*Math.sqrt(t([e.x,e.y],[0,0]))*Math.cos(Math.atan2(e.y,e.x)+Math.PI/2),vy:n*Math.sqrt(t([e.x,e.y],[0,0]))*Math.sin(Math.atan2(e.y,e.x)+Math.PI/2)})))}function gn(){return(e,t=.0175)=>Math.abs(e)<t?e:Math.sign(e)*t}function vn(e,t){return(n,a=.0175)=>t.drag().on("start",(function(e){e.active||(n.restart(),n.counter=100),e.subject.fx=e.subject.x,e.subject.fy=e.subject.y})).on("drag",(function(t){t.subject.fx+=e(t.x-t.subject.fx,a),t.subject.fy+=e(t.y-t.subject.fy,a)})).on("end",(function(e){e.subject.fx=null,e.subject.fy=null}))}function yn(e){return e`### Beam`}function _n(e){return[...Array(3721)].map(((e,t)=>({x:t%61-30,y:Math.floor(t/61)-30}))).map((t=>({x:t.x*e[0][0]+t.y*e[1][0],y:t.x*e[0][1]+t.y*e[1][1]})))}function wn(e){return e.filter((e=>e.y>-.5&&e.y<12.5&&e.x<17.5&&e.x>-17.5)).map((e=>e.x<-15||e.x>15?{x:e.x,y:e.y,fx:e.x,fy:e.y}:e))}function xn(e){return e.filter((e=>15+6*e.x>=Math.sqrt(3)*(25+2*e.y)&&25+2*e.y>=0&&6*e.x+Math.sqrt(3)*(25+2*e.y)<=15)).map((e=>e.y<-5?{x:e.x,y:e.y+7.5,vx:0,vy:.75}:e))}function kn(e,t,n){let a=[];const i=e.map((e=>Object.create(e))),r=t.map((e=>Object.create(e))),o=n.forceSimulation([...i,...r]).force("lennard-jones-BH",n.forceLennardJonesPotential().theta(.125).distanceMax(1.75)).force("zero",(()=>{r.forEach((e=>{e.force_x=0,e.force_y=0}))})).alphaDecay(0).velocityDecay(0).dt(.0375);for(let l=0;l<75;l++){o.tick();const e=new Map([...i,...r].map((e=>[e,{x:e.x,y:e.y,energy:e.energy}])));a.push(Array.from(e.values())),o.stop()}return a}function Sn(e){return e`### Make Your Own`}function Dn(e){return[...Array(1681)].map(((e,t)=>({x:t%41-20,y:Math.floor(t/41)-20}))).map((t=>({x:t.x*e[0][0]+t.y*e[1][0],y:t.x*e[0][1]+t.y*e[1][1]}))).filter((e=>e.x>-10&&e.x<10&&e.y>-10&&e.y<10))}function Mn(){return[]}function jn(e){return e`### General Utilities`}function Ln(){return(e,t,n,a,i,r)=>{null==r&&(r=e=>null);let o=null;n&&(o=e.selectAll(".edge").data(n).enter().append("line").classed("edge",!0).attr("x1",(e=>t[e.source].x)).attr("y1",(e=>t[e.source].y)).attr("x2",(e=>t[e.target].x)).attr("y2",(e=>t[e.target].y)).style("stroke",i?"#bbb":"none"));return[e.selectAll(".node").data(t).enter().append("circle").classed("node",!0).attr("cx",(e=>e.x)).attr("cy",(e=>e.y)).attr("fill",(e=>r(e.energy))).attr("r",(e=>a?e.r:.5)),o]}}function qn(e){return{width:e,height:500,margin:{top:10,right:10,bottom:10,left:10,center:150}}}function Pn(e){return t=>e(Array.from({length:t},((e,t)=>t)),{format:e=>"frame of simulation: "+(e+1),autoplay:!1,loop:!0,alternate:!0})}function An(e){return e`<style>
rect {
  fill: #f5f5f5;
}
.polyline {
  fill: none;
  pointer-events: none;
  stroke: #000;
  stroke-dasharray: 2.5, 2.5;
}
.polygon {
  fill: none;
  pointer-events: none;
  stroke: #000;
}
.tracker {
  fill: none;
  stroke: #000;
}
</style>
`}function Tn(e,t){const a=e.module();function i(){return this.url}const r=new Map([["spring_compressed@1.svg",{url:new URL(n(55031),n.b),mimeType:"image/svg+xml",toString:i}],["spring_equilibrium@1.svg",{url:new URL(n(50400),n.b),mimeType:"image/svg+xml",toString:i}],["spring_expanded@1.svg",{url:new URL(n(16257),n.b),mimeType:"image/svg+xml",toString:i}]]);a.builtin("FileAttachment",e.fileAttachments((e=>r.get(e)))),a.variable(t()).define(["md"],V),a.variable(t()).define(["md"],X),a.variable(t()).define(["md"],Y),a.variable(t("lennardJonesPotentialDoc")).define("lennardJonesPotentialDoc",["md"],Q),a.variable(t("viewof lj_plot_inputs")).define("viewof lj_plot_inputs",["Inputs"],K),a.variable(t("lj_plot_inputs")).define("lj_plot_inputs",["Generators","viewof lj_plot_inputs"],((e,t)=>e.input(t))),a.variable(t("lj_plot")).define("lj_plot",["Plot","lj_plot_inputs","spring_svgs","lj_data"],Z),a.variable(t()).define(["md"],ee),a.variable(t()).define(["md","tex"],te),a.variable(t()).define(["tex"],ne),a.variable(t()).define(["md","tex"],ae),a.variable(t()).define(["tex"],ie),a.variable(t()).define(["md"],re),a.variable(t()).define(["tex"],oe),a.variable(t("viewof lj_harmonic_plot_inputs")).define("viewof lj_harmonic_plot_inputs",["Inputs"],le),a.variable(t("lj_harmonic_plot_inputs")).define("lj_harmonic_plot_inputs",["Generators","viewof lj_harmonic_plot_inputs"],((e,t)=>e.input(t))),a.variable(t("lj_harmonic_plot")).define("lj_harmonic_plot",["Plot","lj_harmonic_plot_inputs","spring_svgs","lj_data"],se),a.variable(t("latticeVibrationsDoc")).define("latticeVibrationsDoc",["md"],ce),a.variable(t()).define(["md","num_of_atoms","oscillation_magnitude_static"],ue),a.variable(t("viewof restart_button_1d")).define("viewof restart_button_1d",["Inputs"],de),a.variable(t("restart_button_1d")).define("restart_button_1d",["Generators","viewof restart_button_1d"],((e,t)=>e.input(t))),a.variable(t("harmonic_animation")).define("harmonic_animation",["d3","DOM","chart_param","one_dimensional_lattice","one_dimensional_lattice_links","restart_button_1d","num_of_atoms","draw_nodes","oscillation_direction","oscillation_magnitude_static","invalidation"],he),a.variable(t()).define(["md"],fe),a.variable(t("sine_wave_plot")).define("sine_wave_plot",["Plot","chart_param","sine_wave"],me),a.variable(t()).define(["md"],pe),a.variable(t("viewof sub_harmonic")).define("viewof sub_harmonic",["Inputs"],be),a.variable(t("sub_harmonic")).define("sub_harmonic",["Generators","viewof sub_harmonic"],((e,t)=>e.input(t))),a.variable(t()).define(["md"],ge),a.variable(t("viewof oscillation_direction")).define("viewof oscillation_direction",["Inputs"],ve),a.variable(t("oscillation_direction")).define("oscillation_direction",["Generators","viewof oscillation_direction"],((e,t)=>e.input(t))),a.variable(t()).define(["md"],ye),a.variable(t("compute_single_period")).define("compute_single_period",["oscillation_magnitude_static","make_one_dimensional_lattice","d3"],_e),a.variable(t()).define(["md","compute_single_period","num_of_atoms","sub_harmonic"],we),a.variable(t()).define(["md","num_of_atoms","tex"],xe),a.variable(t("viewof dispersion_plot")).define("viewof dispersion_plot",["mouseover_selection","vl","dispersion_data","chart_param"],ke),a.variable(t("dispersion_plot")).define("dispersion_plot",["Generators","viewof dispersion_plot"],((e,t)=>e.input(t))),a.variable(t()).define(["md"],Se),a.variable(t("dispersion_animation")).define("dispersion_animation",["d3","DOM","chart_param","make_one_dimensional_lattice","num_of_atoms","dispersion_subharmonic","oscillation_magnitude_static","draw_nodes","oscillation_direction","oscillation_magnitude","invalidation"],De),a.variable(t()).define(["md","dispersion_subharmonic"],Me),a.variable(t()).define(["md","tex"],je),a.variable(t()).define(["md"],Le),a.variable(t("viewof restart_button_1d_lj")).define("viewof restart_button_1d_lj",["Inputs"],qe),a.variable(t("restart_button_1d_lj")).define("restart_button_1d_lj",["Generators","viewof restart_button_1d_lj"],((e,t)=>e.input(t))),a.variable(t("lennard_jones_animation")).define("lennard_jones_animation",["d3","DOM","chart_param","restart_button_1d_lj","make_one_dimensional_lattice","num_of_atoms","sub_harmonic","oscillation_magnitude","draw_nodes","colorScale1D","oscillation_direction","invalidation"],Pe),a.variable(t("viewof oscillation_magnitude")).define("viewof oscillation_magnitude",["Inputs"],Ae),a.variable(t("oscillation_magnitude")).define("oscillation_magnitude",["Generators","viewof oscillation_magnitude"],((e,t)=>e.input(t))),a.variable(t()).define(["md"],Te),a.variable(t()).define(["legend","colorScale1D","chart_param"],Ie),a.variable(t()).define(["md"],$e),a.variable(t("surfaceEnergyDoc")).define("surfaceEnergyDoc",["md"],ze),a.variable(t("square_surface_energy")).define("square_surface_energy",["d3","DOM","chart_param","square_lattice","draw_nodes","colorScale","mutable static_bulk_energy"],Je),a.variable(t()).define(["legend","colorScale","chart_param"],We),a.variable(t()).define(["md"],Oe),a.variable(t()).define(["md"],Be),a.variable(t("surface_energy_slide_graphic")).define("surface_energy_slide_graphic",["d3","DOM","chart_param","theta_in_deg","slice_particle","square_lattice","draw_nodes","colorScale"],Ne),a.variable(t("viewof theta_in_deg")).define("viewof theta_in_deg",["Inputs"],Ge),a.variable(t("theta_in_deg")).define("theta_in_deg",["Generators","viewof theta_in_deg"],((e,t)=>e.input(t))),a.variable(t()).define(["md"],Fe),a.variable(t()).define(["md"],Ce),a.variable(t()).define(["tex"],Ee),a.variable(t()).define(["md","tex"],Re),a.variable(t("compute_average_energy")).define("compute_average_energy",["slice_particle","square_lattice","d3","static_bulk_energy"],He),a.variable(t()).define(["md","theta_in_deg","compute_average_energy","square_lattice"],Ue),a.variable(t()).define(["md"],Ve),a.variable(t("surface_energy_plot")).define("surface_energy_plot",["Plot","surface_energy_data"],Xe),a.variable(t()).define(["md"],Ye),a.variable(t()).define(["md"],Qe),a.variable(t("viewof restart_button_square")).define("viewof restart_button_square",["Inputs"],Ke),a.variable(t("restart_button_square")).define("restart_button_square",["Generators","viewof restart_button_square"],((e,t)=>e.input(t))),a.variable(t("square_instability_animation")).define("square_instability_animation",["d3","DOM","chart_param","square_lattice","restart_button_square","draw_nodes","colorScale","invalidation"],Ze),a.variable(t()).define(["legend","colorScale","chart_param"],et),a.variable(t()).define(["md"],tt),a.variable(t("compressionWavesDoc")).define("compressionWavesDoc",["md"],nt),a.variable(t()).define(["md"],at),a.variable(t("viewof restart_button_hexagonal")).define("viewof restart_button_hexagonal",["Inputs"],it),a.variable(t("restart_button_hexagonal")).define("restart_button_hexagonal",["Generators","viewof restart_button_hexagonal"],((e,t)=>e.input(t))),a.variable(t("compression_waves_animation")).define("compression_waves_animation",["d3","DOM","chart_param","hexagonal_lattice","restart_button_hexagonal","draw_nodes","colorScale","drag","invalidation"],rt),a.variable(t("compression_legend")).define("compression_legend",["legend","colorScale","chart_param"],ot),a.variable(t("viewof nanoparticle_initial_velocity_magnitude")).define("viewof nanoparticle_initial_velocity_magnitude",["Inputs"],lt),a.variable(t("nanoparticle_initial_velocity_magnitude")).define("nanoparticle_initial_velocity_magnitude",["Generators","viewof nanoparticle_initial_velocity_magnitude"],((e,t)=>e.input(t))),a.variable(t()).define(["md"],st),a.variable(t()).define(["md"],ct),a.variable(t("dislocationsDoc")).define("dislocationsDoc",["md"],ut),a.variable(t("viewof animation_frame")).define("viewof animation_frame",["sim_scrubber"],dt),a.variable(t("animation_frame")).define("animation_frame",["Generators","viewof animation_frame"],((e,t)=>e.input(t))),a.variable(t("dislocations_animation")).define("dislocations_animation",["d3","DOM","chart_param","precomputed_animation","animation_frame","draw_nodes","colorScale"],ht),a.variable(t("dislocation_legend")).define("dislocation_legend",["legend","colorScale","chart_param"],ft),a.variable(t()).define(["md"],mt),a.variable(t("beyondLJDoc")).define("beyondLJDoc",["md"],pt),a.variable(t()).define(["md"],bt),a.variable(t()).define(["tex"],gt),a.variable(t("lj_generalized_plot")).define("lj_generalized_plot",["Plot","generalized_lj_data"],vt),a.variable(t("viewof repulsivePower")).define("viewof repulsivePower",["Inputs"],yt),a.variable(t("repulsivePower")).define("repulsivePower",["Generators","viewof repulsivePower"],((e,t)=>e.input(t))),a.variable(t("viewof attractivePower")).define("viewof attractivePower",["Inputs"],_t),a.variable(t("attractivePower")).define("attractivePower",["Generators","viewof attractivePower"],((e,t)=>e.input(t))),a.variable(t("viewof restart_button_hexagonal_generalized")).define("viewof restart_button_hexagonal_generalized",["Inputs"],wt),a.variable(t("restart_button_hexagonal_generalized")).define("restart_button_hexagonal_generalized",["Generators","viewof restart_button_hexagonal_generalized"],((e,t)=>e.input(t))),a.variable(t("generalized_lj_animation")).define("generalized_lj_animation",["d3","DOM","chart_param","hexagonal_lattice","restart_button_hexagonal_generalized","attractivePower","repulsivePower","draw_nodes","colorScale","drag","invalidation"],xt),a.variable(t()).define(["md"],kt),a.variable(t()).define(["tex"],St),a.variable(t("morse_plot")).define("morse_plot",["Plot","morse_data"],Dt),a.variable(t("morsePotential")).define("morsePotential",Mt),a.variable(t("morseGradient")).define("morseGradient",jt),a.variable(t("viewof restart_button_hexagonal_morse")).define("viewof restart_button_hexagonal_morse",["Inputs"],Lt),a.variable(t("restart_button_hexagonal_morse")).define("restart_button_hexagonal_morse",["Generators","viewof restart_button_hexagonal_morse"],((e,t)=>e.input(t))),a.variable(t("morse_animation")).define("morse_animation",["d3","DOM","chart_param","hexagonal_lattice","restart_button_hexagonal_morse","morsePotential","morseGradient","draw_nodes","colorScale","drag","invalidation"],qt),a.variable(t("playgroundDoc")).define("playgroundDoc",["md"],Pt),a.variable(t("viewof restart")).define("viewof restart",["Inputs"],At),a.variable(t("restart")).define("restart",["Generators","viewof restart"],((e,t)=>e.input(t))),a.variable(t("playground_canvas")).define("playground_canvas",["restart","mutable polygon_mutable","d3","DOM","chart_param"],Tt),a.variable(t("viewof restart_button_polygon")).define("viewof restart_button_polygon",["Inputs"],It),a.variable(t("restart_button_polygon")).define("restart_button_polygon",["Generators","viewof restart_button_polygon"],((e,t)=>e.input(t))),a.variable(t("playground_animation")).define("playground_animation",["d3","DOM","chart_param","large_hexagonal_lattice","geometric","polygon_mutable","restart_button_polygon","draw_nodes","colorScale","drag","invalidation"],$t),a.variable(t()).define(["md"],zt),a.variable(t()).define(["md"],Jt),a.variable(t()).define(["md"],Wt),a.variable(t()).define(["md"],Ot),a.variable(t("d3")).define("d3",["require"],Bt),a.variable(t()).define(["md"],Nt);const o=e.module(k);a.import("legend",o),a.variable(t("geometric")).define("geometric",["require"],Gt);const l=e.module(U);return a.import("Scrubber",l),a.variable(t()).define(["md"],Ft),a.variable(t("spring_svgs")).define("spring_svgs",["FileAttachment"],Ct),a.variable(t("lj_data")).define("lj_data",["d3"],Et),a.variable(t("generalized_lj_data")).define("generalized_lj_data",["d3","repulsivePower","attractivePower"],Rt),a.variable(t("morse_data")).define("morse_data",["d3","morsePotential"],Ht),a.variable(t("sine_wave")).define("sine_wave",["sub_harmonic"],Ut),a.variable(t("dispersion_data")).define("dispersion_data",["d3","num_of_atoms","compute_single_period"],Vt),a.variable(t("mouseover_selection")).define("mouseover_selection",["vl"],Xt),a.variable(t("dispersion_mouseover")).define("dispersion_mouseover",["Generators","mouseover_selection","dispersion_plot"],Yt),a.variable(t()).define(["md"],Qt),a.variable(t("num_of_atoms")).define("num_of_atoms",Kt),a.variable(t("oscillation_magnitude_static")).define("oscillation_magnitude_static",Zt),a.variable(t("one_dimensional_lattice")).define("one_dimensional_lattice",["num_of_atoms","oscillation_magnitude_static","sub_harmonic"],en),a.variable(t("one_dimensional_lattice_links")).define("one_dimensional_lattice_links",["num_of_atoms"],tn),a.variable(t("make_one_dimensional_lattice")).define("make_one_dimensional_lattice",nn),a.variable(t("dispersion_subharmonic")).define("dispersion_subharmonic",["dispersion_mouseover","num_of_atoms"],an),a.variable(t("colorScale1D")).define("colorScale1D",["d3"],rn),a.variable(t()).define(["md"],on),a.variable(t("colorScale")).define("colorScale",["d3"],ln),a.variable(t("square_lattice")).define("square_lattice",sn),a.variable(t("slice_particle")).define("slice_particle",cn),a.define("initial static_bulk_energy",un),a.variable(t("mutable static_bulk_energy")).define("mutable static_bulk_energy",["Mutable","initial static_bulk_energy"],((e,t)=>new e(t))),a.variable(t("static_bulk_energy")).define("static_bulk_energy",["mutable static_bulk_energy"],(e=>e.generator)),a.variable(t("surface_energy_data_quarter")).define("surface_energy_data_quarter",["d3","compute_average_energy","square_lattice"],dn),a.variable(t("surface_energy_data")).define("surface_energy_data",["d3","surface_energy_data_quarter"],hn),a.variable(t()).define(["md"],fn),a.variable(t("calc_squared_distance")).define("calc_squared_distance",mn),a.variable(t("hexagonal_lattice_vectors")).define("hexagonal_lattice_vectors",pn),a.variable(t("hexagonal_lattice")).define("hexagonal_lattice",["hexagonal_lattice_vectors","calc_squared_distance","nanoparticle_initial_velocity_magnitude"],bn),a.variable(t("inside_range")).define("inside_range",gn),a.variable(t("drag")).define("drag",["inside_range","d3"],vn),a.variable(t()).define(["md"],yn),a.variable(t("large_hex_particles")).define("large_hex_particles",["hexagonal_lattice_vectors"],_n),a.variable(t("beam_particles")).define("beam_particles",["large_hex_particles"],wn),a.variable(t("indenter_particles")).define("indenter_particles",["large_hex_particles"],xn),a.variable(t("precomputed_animation")).define("precomputed_animation",["beam_particles","indenter_particles","d3"],kn),a.variable(t()).define(["md"],Sn),a.variable(t("large_hexagonal_lattice")).define("large_hexagonal_lattice",["hexagonal_lattice_vectors"],Dn),a.define("initial polygon_mutable",Mn),a.variable(t("mutable polygon_mutable")).define("mutable polygon_mutable",["Mutable","initial polygon_mutable"],((e,t)=>new e(t))),a.variable(t("polygon_mutable")).define("polygon_mutable",["mutable polygon_mutable"],(e=>e.generator)),a.variable(t()).define(["md"],jn),a.variable(t("draw_nodes")).define("draw_nodes",Ln),a.variable(t("chart_param")).define("chart_param",["width"],qn),a.variable(t("sim_scrubber")).define("sim_scrubber",["Scrubber"],Pn),a.variable(t()).define(["html"],An),a}function In(e){return e}function $n(e){return e}function zn(e){return e.html`<hr class="hideable-md" >`}function Jn(e,t){const n=e.module();n.variable(t()).define(["viewof lj_harmonic_plot_inputs"],In),n.variable(t()).define(["lj_harmonic_plot"],$n),n.variable(t()).define(["htl"],zn);const a=e.module(Tn);return n.import("lj_harmonic_plot",a),n.import("viewof lj_harmonic_plot_inputs",a),n.import("lj_harmonic_plot_inputs",a),n}n.r(t),n.d(t,{default:()=>Jn})},52154:(e,t,n)=>{function a(e){return e`# Scrubber

This reusable input is intended to drive animations while providing the reader interactive control on demand: the animation pauses when the user interacts with the slider, but can be resumed by clicking the play button. For examples, see [Bar Chart Race](/@mbostock/bar-chart-race-with-scrubber), [The Wealth & Health of Nations](/@mbostock/the-wealth-health-of-nations), [Solar Path](/@mbostock/solar-path), or [Animated Treemap](/@d3/animated-treemap).`}function i(e){return e`To use in your notebook:

~~~js
import {Scrubber} from "@mbostock/scrubber"
~~~
`}function r(e,t){return e(t)}function o(){return Array.from({length:256},((e,t)=>t))}function l(e,t){return e`The current value of *i* is ${t}.`}function s(e){return e`Given an array of *values* representing the discrete frames of the animation, such as an array of numbers or dates, Scrubber returns a [view-compatible input](/@observablehq/introduction-to-views). (It uses the [disposal promise](/@mbostock/disposal) to stop the animation automatically on invalidation.)`}function c(e){return e`## Options

Scrubber has several options which you can pass as the second argument.`}function u(e){return e`The *autoplay* option, which defaults to true, specifies whether the animation plays automatically. Set it to false to require the reader to click on the play button.`}function d(e,t){return e(t,{autoplay:!1})}function h(e){return e`The *loop* option, which defaults to true, specifies whether the animation should automatically restart from the beginning after the end is reached. Set it to false to require the reader to click the play button to restart the animation after it ends.`}function f(e,t){return e(t,{loop:!1})}function m(e){return e`The *alternate* option, which defaults to false, specifies whether the animation should reverse direction when it reaches the end, rather than repeat from the start.`}function p(e,t){return e(t,{loop:!1,alternate:!0})}function b(e){return e`The *delay* option, which defaults to null, specifies how long to wait between frames in milliseconds. A null value means to use [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame), which typically means sixty times per second (about 17ms). Non-null delays use [setInterval](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval).`}function g(e){return e(["red","green","blue"],{delay:1e3})}function v(e){return e`The *loopDelay* option, which defaults to 0, specifies how long to wait before looping in milliseconds. This can be paired with the *initial* option to show the ending value before the animation starts anew from the beginning.`}function y(e,t){return e(t,{initial:t.length-1,loopDelay:1e3})}function _(e){return e`The *format* option, which defaults to the identity function, specifies how to display the currently-selected value. The *format* function is passed the current value, the current (zero-based) index, and the values array.`}function w(){return Array.from({length:365},((e,t)=>{const n=new Date(2019,0,1);return n.setDate(t+1),n}))}function x(e,t){return e(t,{autoplay:!1,format:e=>e.toLocaleString("en",{month:"long",day:"numeric"})})}function k(e){return e`If you have suggestions for other options you’d like to see, please let me know!`}function S(e){return e`---

## Implementation`}function D(e,t){return function(n,{format:a=(e=>e),initial:i=0,direction:r=1,delay:o=null,autoplay:l=!0,loop:s=!0,loopDelay:c=null,alternate:u=!1}={}){n=Array.from(n);const d=e`<form style="font: 12px var(--sans-serif); font-variant-numeric: tabular-nums; display: flex; height: 33px; align-items: center;">
  <button name=b type=button style="margin-right: 0.4em; width: 5em;"></button>
  <label style="display: flex; align-items: center;">
    <input name=i type=range min=0 max=${n.length-1} value=${i} step=1 style="width: 180px;">
    <output name=o style="margin-left: 0.4em;"></output>
  </label>
</form>`;let h=null,f=null,m=null;function p(){d.b.textContent="Pause",null===o?h=requestAnimationFrame(v):m=setInterval(v,o)}function b(){d.b.textContent="Play",null!==h&&(cancelAnimationFrame(h),h=null),null!==f&&(clearTimeout(f),f=null),null!==m&&(clearInterval(m),m=null)}function g(){return null!==h||null!==f||null!==m}function v(){if(d.i.valueAsNumber===(r>0?n.length-1:r<0?0:NaN)){if(!s)return b();if(u&&(r=-r),null!==c)return null!==h&&(cancelAnimationFrame(h),h=null),null!==m&&(clearInterval(m),m=null),void(f=setTimeout((()=>(y(),p())),c))}null===o&&(h=requestAnimationFrame(v)),y()}function y(){d.i.valueAsNumber=(d.i.valueAsNumber+r+n.length)%n.length,d.i.dispatchEvent(new CustomEvent("input",{bubbles:!0}))}return d.i.oninput=e=>{e&&e.isTrusted&&g()&&b(),d.value=n[d.i.valueAsNumber],d.o.value=a(d.value,d.i.valueAsNumber,n)},d.b.onclick=()=>{if(g())return b();r=u&&d.i.valueAsNumber===n.length-1?-1:1,d.i.valueAsNumber=(d.i.valueAsNumber+r)%n.length,d.i.dispatchEvent(new CustomEvent("input",{bubbles:!0})),p()},d.i.oninput(),l?p():b(),t.disposal(d).then(b),d}}function M(e,t){const n=e.module();return n.variable(t()).define(["md"],a),n.variable(t()).define(["md"],i),n.variable(t("viewof i")).define("viewof i",["Scrubber","numbers"],r),n.variable(t("i")).define("i",["Generators","viewof i"],((e,t)=>e.input(t))),n.variable(t("numbers")).define("numbers",o),n.variable(t()).define(["md","i"],l),n.variable(t()).define(["md"],s),n.variable(t()).define(["md"],c),n.variable(t("autoplay")).define("autoplay",["md"],u),n.variable(t()).define(["Scrubber","numbers"],d),n.variable(t("loop")).define("loop",["md"],h),n.variable(t()).define(["Scrubber","numbers"],f),n.variable(t()).define(["md"],m),n.variable(t()).define(["Scrubber","numbers"],p),n.variable(t("delay")).define("delay",["md"],b),n.variable(t()).define(["Scrubber"],g),n.variable(t("loopDelay")).define("loopDelay",["md"],v),n.variable(t()).define(["Scrubber","numbers"],y),n.variable(t("format")).define("format",["md"],_),n.variable(t("dates")).define("dates",w),n.variable(t("viewof date")).define("viewof date",["Scrubber","dates"],x),n.variable(t("date")).define("date",["Generators","viewof date"],((e,t)=>e.input(t))),n.variable(t()).define(["md"],k),n.variable(t()).define(["md"],S),n.variable(t("Scrubber")).define("Scrubber",["html","Inputs"],D),n}function j(e,t){return e.legend({color:{type:"categorical",domain:t.map((e=>`(a=${e[0].toPrecision(3)}, b=${e[1].toPrecision(3)})`)),scheme:"Set2"}})}function L(e,t){let n=[e.ruleX([1],{stroke:"black",strokeDasharray:[4,4]}),e.ruleY([0],{stroke:"black"}),e.line(t,{x:"rho",y:"energy",stroke:"index"})];return e.plot({width:500,aspectRatio:12.5,color:{type:"categorical",scheme:"Set2"},x:{domain:[.75,1.5],label:"interatomic distance"},y:{domain:[-2.75,2.75],grid:!0,label:"potential"},style:{fontSize:"12px"},marks:n})}function q(e,t){return e(t.ticks(0,1,51),{autoplay:!1,loop:!1,alternate:!0,delay:15,format:e=>""})}function P(e){return e.html`<hr class="hideable-md" >`}function A(e,t){return e.cross([.875+.125*t,1.125-.125*t],[-1.5-.5*t,.5*t-2.5])}function T(e,t){return e.map(((e,n)=>t.range(.75,1.5,.00125).map((t=>({index:n,rho:t,energy:e[0]*Math.pow(t,-12)+e[1]*Math.pow(t,-6)}))))).flat()}function I(e,t){const n=e.module();n.variable(t()).define(["Plot","vals"],j),n.variable(t("lj_plot")).define("lj_plot",["Plot","lj_data"],L),n.variable(t("viewof i")).define("viewof i",["Scrubber","d3"],q),n.variable(t("i")).define("i",["Generators","viewof i"],((e,t)=>e.input(t))),n.variable(t()).define(["htl"],P);const a=e.module(M);return n.import("Scrubber",a),n.variable(t("vals")).define("vals",["d3","i"],A),n.variable(t("lj_data")).define("lj_data",["vals","d3"],T),n}n.r(t),n.d(t,{default:()=>I})}}]);